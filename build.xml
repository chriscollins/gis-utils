<?xml version="1.0" encoding="UTF-8"?>
<project name="chriscollins-gis-utils" default="build">
    <!-- Properties. -->

    <!-- Directories. -->
    <property name="sourcedir" value="${basedir}/lib" />
    <property name="testdir" value="${basedir}/test" />
    <property name="builddir" value="${basedir}/build" />
    <property name="buildbindir" value="${builddir}/bin" />
    <property name="buildtempdir" value="${builddir}/temp" />
    <property name="buildphpddir" value="${builddir}/php.d"/>

    <condition property="originalphpddir" value="C:/php" else="/etc/php.d">
        <os family="windows" />
    </condition>

    <property name="phpcs-standard" value="PSR2" />

    <condition property="composer-exists">
        <available file="${buildbindir}/composer.phar" />
    </condition>

    <condition property="dev-null" value="NUL" else="/dev/null">
        <os family="windows" />
    </condition>

    <!-- Change some executable names to include a .bat extension if we're running on Windows. -->
    <condition property="batch-extension" value=".bat" else="">
        <os family="windows" />
    </condition>


    <!-- Targets. -->
    <target name="build" depends="prepare,install-composer,install-dependencies,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdox,phpunit,phpcb" />

    <target name="build-coverage" depends="prepare,install-composer,install-dependencies,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdox,phpunit-coverage,phpcb" />

    <target name="install-composer" unless="${composer-exists}">
        <property name="composer-installer-path" value="${buildtempdir}/composer-install" />

        <get src="https://getcomposer.org/installer" dest="${composer-installer-path}" />
        <exec executable="php">
            <arg line="${composer-installer-path} --install-dir ${buildbindir}" />
        </exec>

        <delete file="${composer-installer-path}" />
    </target>

    <target name="update-composer" if="${composer-exists}">
        <exec executable="php">
            <arg line="${buildbindir}/composer.phar self-update" />
        </exec>
    </target>

    <target name="install-dependencies">
        <exec executable="php">
            <arg line="${buildbindir}/composer.phar install --dev" />
        </exec>
    </target>

    <target name="build-parallel" depends="prepare,install-composer,install-dependencies,lint,tools-parallel,phpunit,phpcb" />

    <target name="tools-parallel" description="Run tools in parallel.">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend" />
                <antcall target="phpmd-ci" />
            </sequential>
            <antcall target="phpcpd" />
            <antcall target="phpcs-ci" />
            <antcall target="phploc" />
            <antcall target="phpdox" />
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts.">
        <delete dir="${builddir}/api" />
        <delete dir="${builddir}/code-browser" />
        <delete dir="${builddir}/coverage" />
        <delete dir="${builddir}/logs" />
        <delete dir="${builddir}/pdepend" />
        <delete dir="${builddir}/temp" />
    </target>

    <target name="prepare" depends="clean" description="Prepare for build.">
        <mkdir dir="${builddir}/api" />
        <mkdir dir="${builddir}/code-browser" />
        <mkdir dir="${builddir}/coverage" />
        <mkdir dir="${builddir}/logs" />
        <mkdir dir="${builddir}/pdepend" />
        <mkdir dir="${builddir}/phpdox" />
        <mkdir dir="${builddir}/temp" />
        <mkdir dir="${builddir}/bin" />
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files.">
        <apply executable="php" failonerror="true">
            <arg value="-l" />
            <fileset dir="${sourcedir}">
                <include name="**/*.php" />
                <modified />
            </fileset>
            <fileset dir="${testdir}">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC.">
        <exec executable="phploc${batch-extension}">
            <arg value="--log-csv" />
            <arg value="${builddir}/logs/phploc.csv" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend.">
        <exec executable="pdepend${batch-extension}">
            <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpmd" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpmd${batch-extension}">
            <arg path="${sourcedir}" />
            <arg value="text" />
            <arg value="${builddir}/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server.">
        <exec executable="phpmd${batch-extension}">
            <arg path="${sourcedir}" />
            <arg value="xml" />
            <arg value="${builddir}/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${builddir}/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpcs${batch-extension}">
            <arg value="--standard=${phpcs-standard}" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server.">
        <exec executable="phpcs${batch-extension}" output="${dev-null}">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${builddir}/logs/checkstyle.xml" />
            <arg value="--standard=${phpcs-standard}" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD.">
        <exec executable="phpcpd${batch-extension}">
            <arg value="--log-pmd" />
            <arg value="${builddir}/logs/pmd-cpd.xml" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpdox" description="Generate API documentation using phpDox.">
        <exec executable="phpdox${batch-extension}" />
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit.">
        <exec executable="phpunit${batch-extension}" failonerror="true" />
    </target>

    <target name="phpunit-coverage" description="Runs PHPUnit with XDebug enabled.">
        <copy file="${originalphpddir}/php.ini" tofile="${buildphpddir}/original-php.ini" overwrite="true" />
        <copy file="${buildphpddir}/coverage-php.ini" tofile="${originalphpddir}/php.ini" overwrite="true" />
        <exec executable="phpunit${batch-extension}" failonerror="false" resultproperty="phpunit-coverage-failed" />
        <move file="${buildphpddir}/original-php.ini" tofile="${originalphpddir}/php.ini" overwrite="true" />

        <fail>
            <condition>
                <not>
                    <equals arg1="${phpunit-coverage-failed}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser.">
        <exec executable="phpcb${batch-extension}">
            <arg value="--log" />
            <arg path="${builddir}/logs" />
            <arg value="--source" />
            <arg path="${sourcedir}" />
            <arg value="--output" />
            <arg path="${builddir}/code-browser" />
        </exec>
    </target>
</project>
